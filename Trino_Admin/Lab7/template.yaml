---
# Source: trino/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: trino-auth-secret
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
data:
  group.db: ZmluYW5jZTphZG1pbixhbGljZSxib2IKbWFya2V0aW5nOmJvYgo=
---
# Source: trino/templates/configmap-access-control-coordinator.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-cluster-trino-access-control-volume-coordinator
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data:
  rules.json: "{\n  \"catalogs\": [\n    {\n      \"user\": \"admin\",\n      \"catalog\": \".*\",\n      \"allow\": \"all\"\n    },\n    {\n      \"user\": \"alice\",\n      \"catalog\": \"(tpch|system)\",\n      \"allow\": \"read-only\"\n    },\n    {\n      \"group\": \"marketing\",\n      \"catalog\": \"(tpch|system)\",\n      \"allow\": \"read-only\"\n    }\n  ],\n  \"schemas\": [\n    {\n      \"user\": \"admin\",\n      \"schema\": \".*\",\n      \"owner\": true\n    },\n    {\n      \"user\": \"alice\",\n      \"owner\": false\n    }\n  ]\n}"
---
# Source: trino/templates/configmap-catalog.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-cluster-trino-catalog
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: catalogs
data:
  hive.properties: |
    connector.name=hive
    hive.metastore.uri=thrift://hive-service.metastore.svc.cluster.local:9083
    hive.s3.endpoint=http://myminio-hl.minio-tenant.svc.cluster.local:9000
    hive.s3.path-style-access=true
    hive.s3.aws-access-key=${AWS_ACCESS_KEY_ID}
    hive.s3.aws-secret-key=${AWS_SECRET_ACCESS_KEY}
  iceberg.properties: |
    connector.name=iceberg
    hive.metastore.uri=thrift://hive-service.metastore.svc.cluster.local:9083
    hive.s3.endpoint=http://myminio-hl.minio-tenant.svc.cluster.local:9000
    hive.s3.path-style-access=true
    hive.s3.aws-access-key=minio
    hive.s3.aws-secret-key=minio123
    iceberg.file-format=parquet
  tpcds.properties: |
    connector.name=tpcds
    tpcds.splits-per-node=4
    
  tpch.properties: |
    connector.name=tpch
    tpch.splits-per-node=4
---
# Source: trino/templates/configmap-coordinator.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-cluster-trino-coordinator
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -agentpath:/usr/lib/trino/bin/libjvmkill.so
    -Xmx8G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -XX:-OmitStackTraceInFastThrow
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000
    # Allow loading dynamic agent used by JOL
    -XX:+EnableDynamicAgentLoading
  
    # https://bugs.openjdk.org/browse/JDK-8329528
    -XX:+UnlockDiagnosticVMOptions
    -XX:G1NumCollectionsKeepPinned=10000000

  config.properties: |
    coordinator=true
    node-scheduler.include-coordinator=false
    http-server.http.port=8080
    query.max-memory=4GB
    query.max-memory-per-node=2GB
    discovery.uri=http://localhost:8080
    http-server.authentication.type=PASSWORD
    internal-communication.shared-secret=4f2c3e5647f59c0b7e3f5b4d6b9e401e2c8e5a7b21fa5b6f08eae0131f20ff24
    http-server.authentication.allow-insecure-over-http=true
    http-server.process-forwarded=true
    http-server.https.enabled=true
    http-server.https.port=8443
    http-server.https.keystore.path=/etc/trino/generated/tls.pem
  access-control.properties: |
    access-control.name=file
    security.refresh-period=60s
    security.config-file=/etc/trino/access-control/rules.json

  log.properties: |
    io.trino=INFO
  password-authenticator.properties: |
    password-authenticator.name=file
    file.password-file=/etc/trino/auth/password.db
  group-provider.properties: |
    group-provider.name=file
    file.group-file=/etc/trino/auth/group.db
    file.refresh-period=15s
---
# Source: trino/templates/configmap-coordinator.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-cluster-trino-schemas-volume-coordinator
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data:
---
# Source: trino/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-cluster-trino-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -agentpath:/usr/lib/trino/bin/libjvmkill.so
    -Xmx8G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -XX:-OmitStackTraceInFastThrow
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000
    # Allow loading dynamic agent used by JOL
    -XX:+EnableDynamicAgentLoading
  
    # https://bugs.openjdk.org/browse/JDK-8329528
    -XX:+UnlockDiagnosticVMOptions
    -XX:G1NumCollectionsKeepPinned=10000000

  config.properties: |
    coordinator=false
    http-server.http.port=8080
    query.max-memory=4GB
    query.max-memory-per-node=2GB
    discovery.uri=http://trino-cluster-trino:8080
    internal-communication.shared-secret=4f2c3e5647f59c0b7e3f5b4d6b9e401e2c8e5a7b21fa5b6f08eae0131f20ff24
    http-server.authentication.allow-insecure-over-http=true
    http-server.process-forwarded=true

  log.properties: |
    io.trino=INFO
---
# Source: trino/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-cluster-trino-schemas-volume-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
data:
---
# Source: trino/templates/service-coordinator.yaml
apiVersion: v1
kind: Service
metadata:
  name: trino-cluster-trino
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
  annotations:
    custom/name: value
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 8443
      name: https
      targetPort: 8443
      protocol: TCP
  selector:
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/component: coordinator
---
# Source: trino/templates/service-worker.yaml
apiVersion: v1
kind: Service
metadata:
  name: trino-cluster-trino-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
  annotations:
    custom/name: value
spec:
  clusterIP: None
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/component: worker
---
# Source: trino/templates/deployment-coordinator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trino-cluster-trino-coordinator
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
    trino.io/network-policy-protection: disabled
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: trino
      app.kubernetes.io/instance: trino-cluster
      app.kubernetes.io/component: coordinator
  template:
    metadata:
      annotations:
        checksum/catalog-config: 436664596e47807bcdbf5a5e195ac41f2f2f32a3fb005020c042cedaf79eb8ff
        checksum/coordinator-config: 6e1bd545eff7df9f3f6a365c7ca0f6c220bfa2ae413c0a6038732eb5d6dd157c

      labels:
        helm.sh/chart: trino-0.32.0
        app.kubernetes.io/name: trino
        app.kubernetes.io/instance: trino-cluster
        app.kubernetes.io/version: "461"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: coordinator
        trino.io/network-policy-protection: disabled
    spec:
      serviceAccountName: default
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      volumes:
        - name: config-volume
          configMap:
            name: trino-cluster-trino-coordinator
        - name: catalog-volume
          configMap:
            name: trino-cluster-trino-catalog
        - name: schemas-volume
          configMap:
            name: trino-cluster-trino-schemas-volume-coordinator
        - name: access-control-volume
          configMap:
            name: trino-cluster-trino-access-control-volume-coordinator
        - name: file-authentication-volume
          secret:
            secretName: trino-auth-secret
            items:
              - key: password.db
                path: password.db
              - key: group.db
                path: group.db
        - name: certificates
          secret:
            secretName: certificates
        - name: aws-credentials
          secret:
            secretName: aws-credentials
        - emptyDir: {}
          name: generated-files
      initContainers:
      - command:
        - sh
        - -c
        - cat /etc/trino/certificates/tls.crt /etc/trino/certificates/tls.key > /etc/trino/generated/tls.pem
        image: busybox:1.36
        imagePullPolicy: IfNotPresent
        name: init-coordinator
        volumeMounts:
        - mountPath: /etc/trino/certificates
          name: certificates
          readOnly: true
        - mountPath: /etc/trino/generated
          name: generated-files
          readOnly: false
      terminationGracePeriodSeconds: 30
      containers:
        - name: trino-coordinator
          image: trinodb/trino:461
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
            []
          envFrom:
            - secretRef:
                name: aws-credentials
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
            - mountPath: /etc/trino/schemas
              name: schemas-volume
            - mountPath: /etc/trino/access-control
              name: access-control-volume
            - name: certificates
              mountPath: /etc/trino/certificates
            - name: aws-credentials
              mountPath: /etc/aws
            - mountPath: /etc/trino/auth
              name: file-authentication-volume
            - mountPath: /etc/trino/generated
              name: generated-files
              readOnly: false
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command: [/usr/lib/trino/bin/health-check]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          lifecycle:
            {}
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
---
# Source: trino/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trino-cluster-trino-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
    trino.io/network-policy-protection: disabled
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: trino
      app.kubernetes.io/instance: trino-cluster
      app.kubernetes.io/component: worker
  template:
    metadata:
      annotations:
        checksum/catalog-config: 436664596e47807bcdbf5a5e195ac41f2f2f32a3fb005020c042cedaf79eb8ff
        checksum/worker-config: 1f968f2475f2403580c225ad1f94c34082737eec180ce94b69fc82c991f601db
      labels:
        helm.sh/chart: trino-0.32.0
        app.kubernetes.io/name: trino
        app.kubernetes.io/instance: trino-cluster
        app.kubernetes.io/version: "461"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: worker
        trino.io/network-policy-protection: disabled
    spec:
      serviceAccountName: default
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      volumes:
        - name: config-volume
          configMap:
            name: trino-cluster-trino-worker
        - name: catalog-volume
          configMap:
            name: trino-cluster-trino-catalog
        - name: schemas-volume
          configMap:
            name: trino-cluster-trino-schemas-volume-worker
        - name: certificates
          secret:
            secretName: certificates
        - name: aws-credentials
          secret:
            secretName: aws-credentials
      terminationGracePeriodSeconds: 30
      containers:
        - name: trino-worker
          image: trinodb/trino:461
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
            []
          envFrom:
            - secretRef:
                name: aws-credentials
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
            - mountPath: /etc/trino/schemas
              name: schemas-volume
            - name: certificates
              mountPath: /etc/trino/certificates
            - name: aws-credentials
              mountPath: /etc/aws
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command: [/usr/lib/trino/bin/health-check]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          lifecycle:
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
---
# Source: trino/templates/autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: trino-cluster-trino-worker
  namespace: default
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
spec:
  maxReplicas: 3
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trino-cluster-trino-worker
  metrics:
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 15
        type: Percent
        value: 50
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
      - periodSeconds: 15
        type: Percent
        value: 100
      - periodSeconds: 15
        type: Pods
        value: 2
      selectPolicy: Max
      stabilizationWindowSeconds: 0
---
# Source: trino/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: trino-cluster-trino-test-connection
  labels:
    helm.sh/chart: trino-0.32.0
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino-cluster
    app.kubernetes.io/version: "461"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
    test: connection
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: cli
      image: trinodb/trino:461
      command: ['trino']
      args:
      # port must match coordinator.additionalExposedPorts
      - trino://trino-cluster-trino.default:8443?SSL=true&SSLVerification=FULL&SSLTrustStorePath=/etc/trino/certificates/tls.crt
      - --user=admin
      - --password
      - --debug
      - --execute=SELECT 1
      - --no-progress
      env:
        - name: TRINO_PASSWORD
          # must match test-values.yaml
          value: admin123
      volumeMounts:
        - name: certificates
          readOnly: true
          mountPath: "/etc/trino/certificates"
  volumes:
    - name: certificates
      secret:
        secretName: certificates
  restartPolicy: Never
